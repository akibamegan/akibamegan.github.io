{"version":3,"sources":["logo.png","img/tictactoe.png","img/calc.png","img/tasklist.png","serviceWorker.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","PostsData","tictactoe","calc","tasklist","Main","state","posts","this","setState","className","id","Object","keys","map","key","index","details","React","Component","Title","src","logo","alt","width","target","href","Button","props","link","CardHeader","image","category","style","backgroundImage","CardBody","title","text","Card","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yFAAAA,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,wKCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sECRAC,EAAY,CAChB,CACE,SAAY,UACZ,MAAS,qBACT,KAAQ,8FACR,MAASC,IACT,KAAQ,0CAEV,CACE,SAAY,UACZ,MAAS,iBACT,KAAQ,sGACR,MAASC,IACT,KAAQ,2CAEV,CACE,SAAY,UACZ,MAAS,iBACT,KAAQ,cACR,MAAS,IAEX,CACE,SAAY,UACZ,MAAS,mBACT,KAAQ,8CACR,MAASC,KAEX,CACE,SAAY,UACZ,MAAS,kBACT,KAAQ,cACR,MAAS,KAOPC,E,YACJ,aAAe,IAAD,8BACZ,+CAEKC,MAAQ,CACXC,MAAO,IAJG,E,kFAQZC,KAAKC,SAAS,CACZF,MAAON,M,+BAKD,IAAD,OACP,OAAO,yBAAKS,UAAU,cACpB,4BAAQA,UAAU,eAClB,kBAAC,EAAD,MACA,yBAAKA,UAAU,gBAAgBC,GAAG,iBAE9BC,OACCC,KAAKL,KAAKF,MAAMC,OAChBO,KAAI,SAAAC,GAAG,OAAI,kBAAC,EAAD,CAAMA,IAAKA,EAAKC,MAAOD,EAAKE,QAAS,EAAKX,MAAMC,MAAMQ,c,GAvBzDG,IAAMC,WA+BnBC,E,iLAEF,OACA,6BAASV,UAAU,aACjB,yBAAKA,UAAU,qBACb,yBAAKW,IAAKC,IAAMZ,UAAU,WAAWa,IAAI,OAAOC,MAAM,UACtD,uCACA,gDACA,uBAAGC,OAAQ,SAAUC,KAAK,qCAA1B,c,GARYR,IAAMC,WAgBpBQ,E,iLAEF,OACE,4BAAQjB,UAAU,wBAAwBgB,KAAMlB,KAAKoB,MAAMC,MAA3D,mB,GAHeX,IAAMC,WAWrBW,E,iLACM,IAAD,EACqBtB,KAAKoB,MAAzBG,EADD,EACCA,MAAOC,EADR,EACQA,SACXC,EAAQ,CACRC,gBAAiB,OAASH,EAAQ,KAEtC,OACE,4BAAQE,MAAOA,EAAOvB,UAAU,eAC9B,wBAAIA,UAAU,sBAAsBsB,Q,GARnBd,IAAMC,WAezBgB,E,iLAEF,OACE,yBAAKzB,UAAU,aACb,uBAAGA,UAAU,QAAb,aAEA,4BAAKF,KAAKoB,MAAMQ,OAEhB,uBAAG1B,UAAU,gBAAgBF,KAAKoB,MAAMS,MAExC,kBAAC,EAAD,W,GAVenB,IAAMC,WAiBvBmB,E,iLAEF,OACE,6BAAS5B,UAAU,QACjB,kBAAC,EAAD,CAAYsB,SAAUxB,KAAKoB,MAAMX,QAAQe,SAAUD,MAAOvB,KAAKoB,MAAMX,QAAQc,QAC7E,kBAAC,EAAD,CAAUK,MAAO5B,KAAKoB,MAAMX,QAAQmB,MAAOC,KAAM7B,KAAKoB,MAAMX,QAAQoB,Y,GALzDnB,IAAMC,WAYzBoB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SDrBpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.44afe059.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.66b8b79d.png\";","module.exports = __webpack_public_path__ + \"static/media/tictactoe.0c369458.png\";","module.exports = __webpack_public_path__ + \"static/media/calc.7fddecd8.png\";","module.exports = __webpack_public_path__ + \"static/media/tasklist.2d1fc144.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport logo from './logo.png';\nimport tictactoe from './img/tictactoe.png';\nimport calc from './img/calc.png';\nimport tasklist from './img/tasklist.png';\n\n//Temporarily store data here\nconst PostsData = [\n  {\n    \"category\": \"Project\",\n    \"title\": \"Simple Tic Tac Toe\",\n    \"text\": \"First React Project! Created using create-react-app. https://akibamegan.github.io/tictactoe\",\n    \"image\": tictactoe,\n    \"link\": \"https://akibamegan.github.io/tictactoe\"\n  },\n  {\n    \"category\": \"Project\",\n    \"title\": \"iOS Calculator\",\n    \"text\": \"A functioning calculator that looks like an iOS calculator. https://akibamegan.github.io/calculator\",\n    \"image\": calc,\n    \"link\": \"https://akibamegan.github.io/calculator\"\n  },\n  {\n    \"category\": \"Project\",\n    \"title\": \"Spotify Player\",\n    \"text\": \"COMING SOON\",\n    \"image\": \"\"\n  },\n  {\n    \"category\": \"Project\",\n    \"title\": \"Simple Task List\",\n    \"text\": \"Simple task list that can add/remove tasks.\",\n    \"image\": tasklist\n  },\n  {\n    \"category\": \"Project\",\n    \"title\": \"Project 5 Title\",\n    \"text\": \"COMING SOON\",\n    \"image\": \"\"\n  }\n]\n\n\n// Start App\n\nclass Main extends React.Component { \n  constructor() {\n    super();\n    \n    this.state = {\n      posts: {}\n    }\n  }\n  componentWillMount() {\n    this.setState({\n      posts: PostsData\n    });\n  }\n \n\n  render() {\n    return <div className=\"everything\">\n      <header className=\"app-header\"></header>\n      <Title />\n      <div className=\"app-card-list\" id=\"app-card-list\">\n        {\n          Object\n          .keys(this.state.posts)\n          .map(key => <Card key={key} index={key} details={this.state.posts[key]}/>)\n        }\n    </div>\n    </div>\n  }\n}\n\n\nclass Title extends React.Component {\n  render() {\n    return (\n    <section className=\"app-title\">\n      <div className=\"app-title-content\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" width=\"170px\"/>\n        <p>React JS</p>\n        <p>Independent Study</p>\n        <a target={\"_blank\"} href=\"https://meganakiba.wordpress.com/\">Blog</a>\n      </div>\n    </section>\n    )\n  }\n}\n\n\nclass Button extends React.Component {\n  render() {\n    return (\n      <button className=\"button button-primary\" href={this.props.link}>\n        See Project\n      </button>\n    )\n  }\n}\n\n\nclass CardHeader extends React.Component {\n  render() {\n    const { image, category } = this.props;\n    var style = { \n        backgroundImage: 'url(' + image + ')',\n    };\n    return (\n      <header style={style} className=\"card-header\">\n        <h4 className=\"card-header--title\">{category}</h4>\n      </header>\n    )\n  }\n}\n\n\nclass CardBody extends React.Component {\n  render() {\n    return (\n      <div className=\"card-body\">\n        <p className=\"date\">Fall 2019</p>\n        \n        <h2>{this.props.title}</h2>\n        \n        <p className=\"body-content\">{this.props.text}</p>\n        \n        <Button/>\n      </div>\n    )\n  }\n}\n\n\nclass Card extends React.Component {\n  render() {\n    return (\n      <article className=\"card\">\n        <CardHeader category={this.props.details.category} image={this.props.details.image}/>\n        <CardBody title={this.props.details.title} text={this.props.details.text}/>\n      </article>\n    )\n  }\n}\n\n\nReactDOM.render(\n  <Main />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}